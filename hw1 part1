#include <iostream>
#include <stack>
#include <string>

int precedence(char op){
    if(op == '+' || op == '-'){
        return 1;
    } else if(op == '*' || op == '/'){
        return 2;
    } else if(op == '^'){
        return 3;
    }
    return 0;
}

bool isOperator(char c){
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

bool isLeftAssociative(char op){
    // Only ^ is right associative
    return op != '^';
}

std::string infixToPostfix(const std::string& infix){
    std::stack<char> stack;
    std::string postfix = "";

    for(char token : infix){
        if(isalnum(token)){
            postfix += token;
        } else if(token == '('){
            stack.push(token);
        } else if(token == ')'){
            while(!stack.empty() && stack.top() != '('){
                postfix += stack.top();
                stack.pop();
            }
            stack.pop(); // Remove the '(' from the stack
        } else if(isOperator(token)){
            while(!stack.empty() && precedence(token) <= precedence(stack.top()) && (isLeftAssociative(token) || precedence(token) < precedence(stack.top()))){
                postfix += stack.top();
                stack.pop();
            }
            stack.push(token);
        }
    }

    while(!stack.empty()){
        postfix += stack.top();
        stack.pop();
    }

    return postfix;
}

int main(){
    std::string infix;
    std::cout << "Enter infix expression: ";
    std::getline(std::cin, infix);

    std::string postfix = infixToPostfix(infix);
    std::cout << "Postfix expression: " << postfix << std::endl;

    return 0;
}
